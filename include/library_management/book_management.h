#ifndef BOOK_MANAGEMENT_GUARD__H 
#define BOOK_MANAGEMENT_GUARD__H

/* constants */
extern const char* BOOK_MGMT_DB;

/* externals -- for testing */
#ifdef TESTING_FLAG
extern struct Book* book_db;
extern long book_db_size;
#endif

struct FILE;

struct Book {
	int id; // unique book id
	char *title; // book title
	char *authors; // comma separated list of authors
	unsigned int year; // year of publication
	unsigned int copies; // number of copies the library has
};

struct BookArray {
	struct Book* arr;
	long size;
};

// saves the database of books in the specified file
// returns 0 if books were stored correctly, or an error code otherwise
int store_books(struct FILE *file);

// loads the database of books from the specified file
// the file must have been generated by a previous call to store_books()
// returns 0 if books were loaded correctly, or an error code otherwise
int load_books(struct FILE *file);

// adds a book to the ones available to the library
// returns 0 if the book could be added, or an error code otherwise
int add_book(struct Book book);

// removes a book from the library
// returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_book(unsigned int id);

// finds books with a given id.
// returns a newly allocated array of books, or null if no book with the 
// provided title can be found.
struct BookArray find_book_by_id (unsigned int book_ID);

// finds books with a given title.
// returns a newly allocated array of books, or null if no book with the 
// provided title can be found.
struct BookArray find_book_by_title (const char *title);

// finds books with the given authors.
// returns a newly allocated array of books, or null if no book with the 
// provided authors can be found.
struct BookArray find_book_by_author (const char *author);

// finds books published in the given year.
// returns a newly allocated array of books, or null if no book with published
// in the given year can be found.
struct BookArray find_book_by_year (unsigned int year);

// frees a BookArray
void free_BookArray(struct BookArray b_arr);


#endif
